//Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.
//You must write an algorithm that runs in O(n) time and uses only constant extra space.

//Example 1:
//Input: nums = [4,3,2,7,8,2,3,1]
//Output: [2,3]

//Example 2:
//Input: nums = [1,1,2]
//Output: [1]

//Example 3:
//Input: nums = [1]
//Output: []

//JAVA

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> dup = new ArrayList<>();
        int i =0;
        //cyclic sort
        while(i<nums.length){
            int corr = nums[i]-1;
            if(nums[corr] != nums[i]){
                int temp = nums[corr];
                nums[corr]=nums[i];
                nums[i]=temp;
            }else{
                i++;
            }
            
        }
            
            for( i = 0; i<nums.length; i++){
                if(nums[i] != i+1){
                    dup.add(nums[i]);
                }
            }
        
        System.out.println(Arrays.toString(nums));
        return dup;
    }
}
